<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS复习一</title>
    <url>/CSS%E5%A4%8D%E4%B9%A0%E4%B8%80/</url>
    <content><![CDATA[<h2 id="CSS简介和基础选择器的使用"><a href="#CSS简介和基础选择器的使用" class="headerlink" title="CSS简介和基础选择器的使用"></a>CSS简介和基础选择器的使用</h2><span id="more"></span>

<h3 id="1-css简介"><a href="#1-css简介" class="headerlink" title="1.css简介"></a>1.css简介</h3><p>1.1HTML的局限性</p>
<p>HTML是网页的骨架,只关注内容的语义,例如<code>&lt;h1&gt;</code>表示大标题, <code>&lt;p&gt;</code>表示段落</p>
<h4 id="1-2网页的美容师"><a href="#1-2网页的美容师" class="headerlink" title="1.2网页的美容师"></a>1.2网页的美容师</h4><p>==CSS== 是 层叠样式表（Cascading Style Sheets）的简称。</p>
<p>CSS 也是一种标记语言。</p>
<p>CSS 主要用于设置 HTML 页面中的文本内容（字体、大小、对齐方式）、图片的外形（宽高、边框样式、边距等）以及版面的布局和外观显示样式。</p>
<p>HTML 呈现结构，CSS 决定样式，结构与样式分离。</p>
<h4 id="1-2CSS语法规范"><a href="#1-2CSS语法规范" class="headerlink" title="1.2CSS语法规范"></a>1.2CSS语法规范</h4><p>css规则由两个部分组成: 选择器和一条或多条声明</p>
<h4 id="1-css代码风格"><a href="#1-css代码风格" class="headerlink" title="1.css代码风格"></a>1.css代码风格</h4><ul>
<li>展开式</li>
<li>选择器,属性名,属性关键字全部小写</li>
<li>空格规范</li>
</ul>
<h3 id="2-css选择器"><a href="#2-css选择器" class="headerlink" title="2.css选择器"></a>2.css选择器</h3><h4 id="2-1选择器的作用"><a href="#2-1选择器的作用" class="headerlink" title="2.1选择器的作用"></a>2.1选择器的作用</h4><p>选择器就是根据不同需求把不同标签选择出来</p>
<h4 id="2-2选择器分类"><a href="#2-2选择器分类" class="headerlink" title="2.2选择器分类"></a>2.2选择器分类</h4><p>选择器分为==基础选择器==和==复合选择器==两大类</p>
<ul>
<li>基础选择器由单个选择器组成</li>
<li>基础选择器包括:包括标签选择器、类选择器、id选择器和通配符选择器</li>
</ul>
<h4 id="2-3标签选择器"><a href="#2-3标签选择器" class="headerlink" title="2.3标签选择器"></a>2.3标签选择器</h4><p>直接为HTML标签名作为选择器、按标签名称分类,==为页面某一类标签指定统一的css样式==</p>
<p>语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">标签名&#123;</span><br><span class="line">	属性<span class="number">1</span>: 属性值<span class="number">1</span>;</span><br><span class="line">	属性<span class="number">2</span>: 属性值<span class="number">2</span>;</span><br><span class="line">    属性<span class="number">3</span>: 属性值<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**==优点==**标签选择器可以把某一标签全部选择出来,快速为同类型标签设置统一样式</p>
<p>**==缺点==**不能设置差异化样式，只能选择当前全部标签</p>
<h4 id="2-4类选择器"><a href="#2-4类选择器" class="headerlink" title="2.4类选择器"></a>2.4类选择器</h4><p>差异化选择不同选择器，单独选一个或者某一标签</p>
<p>==语法==</p>
<p>使用<code>class</code>属性来调用class类,样式点定义,结构类调用,一个或多个开发最常用</p>
<p>类选择器用<code>.</code>号显示</p>
<p>==注意==</p>
<p>1.类选择器使用<code>.</code>标识,紧跟类名。</p>
<p>2.小写,使用<code>+</code>连接单词。</p>
<p>3.不要使用纯数字,中文。</p>
<p>4.命名更有意义。</p>
<h4 id="2-4-1类选择器-多类名"><a href="#2-4-1类选择器-多类名" class="headerlink" title="2.4.1类选择器-多类名"></a>2.4.1类选择器-多类名</h4><p>类名间用空格分开</p>
<p><code>&lt;span class=&quot;father son&quot;&gt;&lt;/span&gt;</code></p>
<h4 id="2-5id选择器"><a href="#2-5id选择器" class="headerlink" title="2.5id选择器"></a>2.5id选择器</h4><p>id选择器可以标有特定id的HTML元素指定特定的样式</p>
<p>HTML元素以id属性来设置id选择器,用#来定义</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#id</span>名&#123;</span><br><span class="line">	属性<span class="number">1</span>:属性值<span class="number">1</span></span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="selector-tag">span</span> id=&quot;father&quot;&gt;&lt;/<span class="selector-tag">span</span>&gt;</span><br></pre></td></tr></table></figure>

<p>样式==#==定义,结构id调用,别人切勿使用。</p>
<p>id选择器与类选择器的区别</p>
<p>1.类元素器可以被==多个==元素调用</p>
<p>2.id选择器只能允许==一个==标签调用</p>
<p>3.类选择器使用的较多，id选择器用于唯一特性的标签</p>
<p>2.6通配符选择器</p>
<p>语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">*&#123;</span><br><span class="line">	<span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>用*通配符选择器,选取页面中所有标签</li>
<li>不需要调用,自动给所有标签。</li>
<li>特殊情况使用</li>
</ul>
<h4 id="2-7基础选择器总结"><a href="#2-7基础选择器总结" class="headerlink" title="2.7基础选择器总结"></a>2.7基础选择器总结</h4><table>
<thead>
<tr>
<th>基础选择器</th>
<th>作用</th>
<th>特点</th>
<th>使用情况</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>标签选择器</td>
<td>选中所有标签</td>
<td>不能差异化选择</td>
<td>较多</td>
<td>p{<br />color: red;<br />}</td>
</tr>
<tr>
<td>类选择器</td>
<td>选出一个或多个标签</td>
<td>可以根据需求选择</td>
<td>较多</td>
<td>.father{<br />color: red<br />}</td>
</tr>
<tr>
<td>id选择器</td>
<td>一次只能选一次</td>
<td>一生只能被属性选择一次</td>
<td>一般配合js使用</td>
<td>#father{<br />color: red<br />}</td>
</tr>
<tr>
<td>通配符选择器</td>
<td>选择所有标签元素</td>
<td>择的太多，有部分不需要</td>
<td>特殊情况使用</td>
<td>*father{<br />color: red<br />}</td>
</tr>
</tbody></table>
<h3 id="3-css字体属性"><a href="#3-css字体属性" class="headerlink" title="3.css字体属性"></a>3.css字体属性</h3><h4 id="3-1字体系列"><a href="#3-1字体系列" class="headerlink" title="3.1字体系列"></a>3.1字体系列</h4><p>CSS使用<code>font-family</code>属性定义文本字体。尽量使用默认字体，保证不同浏览器的兼容性</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">	<span class="attribute">font-family</span>: <span class="string">&quot;宋体&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-2字体大小"><a href="#3-2字体大小" class="headerlink" title="3.2字体大小"></a>3.2字体大小</h4><p>CSS使用<code>font-size</code>属性定义字体大小</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>px</code>大小是我们网页常用单位</li>
<li>谷歌浏览器默认是<code>16px</code></li>
<li>可以给<code>body</code>指定这个页面文字大小</li>
</ul>
<h4 id="3-3字体粗细"><a href="#3-3字体粗细" class="headerlink" title="3.3字体粗细"></a>3.3字体粗细</h4><p>CSS使用<code>font-weight</code>属性设置字体粗细</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">	font-weight: 700;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际开发中,更常用数字来表示加粗或变细。400为normal，700位bold。这两个属性值是开发中最常用的剩下的就自己开发啦~ 注意后面没有单位奥。</p>
<h4 id="3-4文字样式"><a href="#3-4文字样式" class="headerlink" title="3.4文字样式"></a>3.4文字样式</h4><p>CSS使用<code>font-style</code>属性设置文本风格</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;<span class="attribute">font-style</span>: italic;&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>normal</td>
<td>正常显示</td>
</tr>
<tr>
<td>italic</td>
<td><em>斜体</em></td>
</tr>
</tbody></table>
<p>==注意：平常很少给字体加斜体，而是给斜体标签（em,i）给位不倾斜字体。==</p>
<h4 id="3-5字体符合属性写法"><a href="#3-5字体符合属性写法" class="headerlink" title="3.5字体符合属性写法"></a>3.5字体符合属性写法</h4><p>将各种字体属性写在同一选择器下，节约代码。</p>
<p>规则</p>
<p>严格遵守顺序，且 <code>font-siez</code> 和 <code>font-family</code> 必须有。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  font: font-style font-weight font-size/line-hight font-family;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-6字体属性总结"><a href="#3-6字体属性总结" class="headerlink" title="3.6字体属性总结"></a>3.6字体属性总结</h4><table>
<thead>
<tr>
<th>字体属性</th>
<th>表示</th>
<th>注意</th>
</tr>
</thead>
<tbody><tr>
<td>font-size</td>
<td>字号</td>
<td>单位是 <code>px</code></td>
</tr>
<tr>
<td>font-family</td>
<td>字体</td>
<td>按照团队约定来写</td>
</tr>
<tr>
<td>font-weight</td>
<td>字体粗细</td>
<td>400=normal，700=bold</td>
</tr>
<tr>
<td>font-style</td>
<td>字体样式</td>
<td>italic，normal，常用 normal</td>
</tr>
<tr>
<td>font</td>
<td>属性连写</td>
<td>顺序不能变，字体和字号属性必须有</td>
</tr>
</tbody></table>
<h3 id="4-CSS文本属性"><a href="#4-CSS文本属性" class="headerlink" title="4.CSS文本属性"></a>4.CSS文本属性</h3><p>CSS Text（文本）属性定义文本外观，比如颜色、对齐、装饰、缩进、行间距等。</p>
<h4 id="4-1文本颜色"><a href="#4-1文本颜色" class="headerlink" title="4.1文本颜色"></a>4.1文本颜色</h4><p><code>color</code> 属性定义文本颜色。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;    &lt;!--英文--&gt;</span><br><span class="line">  <span class="attribute">color</span>:　<span class="number">#FFF</span>;	&lt;!--十六进制--&gt;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>); &lt;!--RGB--&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>属性值:RGB、英文、十六进制 实际开发中最常用十六进制;</p>
<h4 id="4-2对其文本"><a href="#4-2对其文本" class="headerlink" title="4.2对其文本"></a>4.2对其文本</h4><p><code>text-align</code> 属性用于设置元素文本内容的对齐方式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性值</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td>左对齐(默认)</td>
</tr>
<tr>
<td>right</td>
<td>右对齐</td>
</tr>
<tr>
<td>center</td>
<td>居中对齐</td>
</tr>
</tbody></table>
<h4 id="4-3装饰文本"><a href="#4-3装饰文本" class="headerlink" title="4.3装饰文本"></a>4.3装饰文本</h4><p><code>text-decoration</code> 属性规定添加到文本的修饰。可以给文本添加下划线、删除线、上划线等。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">text-decoration: underline;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><strong>属性值</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>默认，无装饰（最常用）</td>
</tr>
<tr>
<td>underline</td>
<td>下划线，a 标签自带（常用）</td>
</tr>
<tr>
<td>overline</td>
<td>上划线。（几乎不用）</td>
</tr>
<tr>
<td>line-through</td>
<td>删除线。（不常用）</td>
</tr>
</tbody></table>
<h4 id="4-4文本缩进"><a href="#4-4文本缩进" class="headerlink" title="4.4文本缩进"></a>4.4文本缩进</h4><p><code>text-indent</code>定义段落首行缩进。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">	text-indet: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-5行间距"><a href="#4-5行间距" class="headerlink" title="4.5行间距"></a>4.5行间距</h4><p><code>line-height</code> 设置行间的距离，行间距=文本高度+上间距+下间距</p>
<h4 id="4-6文本属性总结"><a href="#4-6文本属性总结" class="headerlink" title="4.6文本属性总结"></a>4.6文本属性总结</h4><table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th>表示</th>
<th><strong>注意</strong></th>
</tr>
</thead>
<tbody><tr>
<td>color</td>
<td>文本颜色</td>
<td>通常十六进制缩写</td>
</tr>
<tr>
<td>text-align</td>
<td>文本对齐</td>
<td></td>
</tr>
<tr>
<td>text-indent</td>
<td>文本缩进</td>
<td>记住 <code>text-indent: 2em;</code></td>
</tr>
<tr>
<td>text-decoration</td>
<td>文本装饰</td>
<td>记住下划线和去除下划线</td>
</tr>
<tr>
<td>line-height</td>
<td>行高</td>
<td>行高高度和盒子高度一样会使文字垂直水平居中。</td>
</tr>
</tbody></table>
<h3 id="5-CSS引用方式"><a href="#5-CSS引用方式" class="headerlink" title="5.CSS引用方式"></a>5.CSS引用方式</h3><p>按照 CSS 书写的位置不同，CSS 样式表可以分为三大类：</p>
<ol>
<li>行内样式表（行内式）</li>
<li>内部样式表（嵌入式）</li>
<li>外部样式表（链接式）</li>
</ol>
<h4 id="5-1内部样式表"><a href="#5-1内部样式表" class="headerlink" title="5.1内部样式表"></a>5.1内部样式表</h4><p>将 CSS 代码写在 HTML 页面内部，单独放在一个 <code>&lt;style&gt;</code> 标签中。</p>
<ul>
<li><code>&lt;style&gt;</code> 理论上可以放在 HTML 文档中任何一个地方，一般放在 <code>&lt;head&gt;</code> 标签中。</li>
<li>方便控制整个页面中的元素样式。</li>
</ul>
<p>建议练习时使用</p>
<h4 id="5-2行内样式表"><a href="#5-2行内样式表" class="headerlink" title="5.2行内样式表"></a>5.2行内样式表</h4><p>行内样式表（内联样式表）是在元素标签内部的 <code>style</code> 属性中设定 CSS 样式，适合修改简单样式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> style=&quot;<span class="attribute">color</span>: red; <span class="attribute">font-size</span>: <span class="number">12px</span><span class="string">&quot;&gt;行内样式表&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>设置当前标签样式</li>
<li>书写繁琐，不推荐大量使用</li>
</ul>
<h4 id="5-3外部样式表"><a href="#5-3外部样式表" class="headerlink" title="5.3外部样式表"></a>5.3外部样式表</h4><p>实际开发中都是外部样式表，适用于样式比较多的情况。 核心：样式单独写到 CSS 文件中，再将 CSS 文件引入到 HTML 页面中。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;css文件路径&quot; /&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS复习二</title>
    <url>/CSS%E5%A4%8D%E4%B9%A0%E4%BA%8C/</url>
    <content><![CDATA[<h2 id="CSS复合选择器与特性"><a href="#CSS复合选择器与特性" class="headerlink" title="CSS复合选择器与特性"></a>CSS复合选择器与特性</h2><span id="more"></span>

<h3 id="1-Emmet语法"><a href="#1-Emmet语法" class="headerlink" title="1.Emmet语法"></a>1.Emmet语法</h3><ul>
<li>快速生成HTML结构代码</li>
<li>快速生成CSS样式代码</li>
</ul>
<h3 id="2-复合选择器"><a href="#2-复合选择器" class="headerlink" title="2.复合选择器"></a>2.复合选择器</h3><p>由基础选择器组合而成。</p>
<ul>
<li>后代选择器</li>
<li>子选择器</li>
<li>并集选择器</li>
<li>伪类选择器</li>
</ul>
<h4 id="2-1后代选择器-重要"><a href="#2-1后代选择器-重要" class="headerlink" title="2.1后代选择器(重要)"></a>2.1后代选择器(重要)</h4><p>后代选择器又称为包含选择器，可以选择父元素里的子元素。写法是将外层标签写在前面，内层标签写在后面，中间空格分开。</p>
<p><strong>语法：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">元素<span class="number">1</span> 元素<span class="number">2</span> &#123;样式声明;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>上述语法表示选择元素1里面所有的元素2</li>
<li>可以连续嵌套，比如可以是孙子等</li>
<li>元素1、2可以是任何基础标签</li>
</ul>
<h4 id="2-2子选择器-重要"><a href="#2-2子选择器-重要" class="headerlink" title="2.2子选择器(重要)"></a>2.2子选择器(重要)</h4><p>子元素选择器(子选择器)只能选择作为元素的最近一级子元素。简单理解就是选亲儿子</p>
<p><strong>语法：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">元素<span class="number">1</span> &gt; 元素<span class="number">2</span> &#123;样式声明;&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>元素之间用大于<code>&gt;</code>符号隔开</li>
<li>1位父级，二为子级，最终选择的元素是2</li>
<li>元素2必须是亲儿子</li>
</ul>
<h4 id="2-3并集选择器"><a href="#2-3并集选择器" class="headerlink" title="2.3并集选择器"></a>2.3并集选择器</h4><p>并集选择器可以选择多组标签，同时为他们定义相同的样式。通常用于集体声明。</p>
<p>并集选择器通过英文<code>,</code>连接而成，任何形式的选择器都可以作为并集选择器的一部分</p>
<p><strong>语法</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">元素<span class="number">1</span>,元素<span class="number">2</span> &#123;样式声明;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4伪类选择器"><a href="#2-4伪类选择器" class="headerlink" title="2.4伪类选择器"></a>2.4伪类选择器</h4><p>伪类选择器用于向某些选择器添加特殊的效果。 伪类选择器书写最大特点是用冒号 <code>:</code> 表示。 伪类选择器种类多，比如链接伪类选择器、结构选择器等。</p>
<h5 id="2-4-1连接伪类选择器"><a href="#2-4-1连接伪类选择器" class="headerlink" title="2.4.1连接伪类选择器"></a>2.4.1连接伪类选择器</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> <span class="comment">/*选择所有未被访问的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> <span class="comment">/*选择所有已被访问的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> <span class="comment">/*选择鼠标指针位于其上的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> <span class="comment">/*选择活动链接（鼠标按下未弹起的链接）*/</span></span><br></pre></td></tr></table></figure>

<p><strong>注意事项</strong></p>
<ol>
<li>确保样式生效，要按照 LVHA 的顺序声明：link,visited,hover, active。</li>
<li>a 链接在浏览器中有默认样式，所以实际开发都需要给链接单独指定样式。</li>
</ol>
<p><strong>例子:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: color;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-2focus伪类选择器"><a href="#2-4-2focus伪类选择器" class="headerlink" title="2.4.2focus伪类选择器"></a>2.4.2focus伪类选择器</h5><p><code>:focus</code> 伪类选择器用于获取焦点的表单元素。 焦点就是光标，一般情况</p>
<p><code>&lt;input&gt;</code> 类表单元素才能获取，因此这个选择器也主要针对表单元素来说。</p>
<p>例子:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">input:focus &#123;</span><br><span class="line">  background-color: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-3其他标准伪类选择器"><a href="#2-4-3其他标准伪类选择器" class="headerlink" title="2.4.3其他标准伪类选择器"></a>2.4.3其他标准伪类选择器</h5><p>1.<code>first-child</code></p>
<p><code>:first-child</code> 是 CSS 伪类，表示父元素的第一个子元素。</p>
<p>2.<code>last-child</code></p>
<p><code>:last-child</code> CSS 伪类 代表父元素的最后一个子元素。</p>
<p>3.<code>nth-child(n)</code></p>
<p><code>:nth-child(an+b)</code>这个 CSS 伪类首先找到所有当前元素的兄弟元素。然后按照位置先后顺序从1开始排序,选择的结果为 CSS 伪类<code>:nth-child</code>括号中表达式 <code>（an+b）</code>匹配到的元素集合<code>(n=0,1,2,3...)</code></p>
<p>4.<code>not(p)</code></p>
<p><code>:not()</code>用来匹配不符合一组选择器的元素。由于它的作用是防止特定的元素被选中，它也被称为反选伪类（negation pseudo-class）。</p>
<p>5.<code>::after (:after)</code></p>
<p>CSS 伪元素 <code>::after</code> 用来创建一个伪元素，作为已选中元素的最后一个子元素。通常会配合 <code>content</code> 属性来为该元素添加装饰内容。这个虚拟元素默认是行内元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.exciting-text</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&lt;- 哈哈哈哈哈哈哈&quot;</span>;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以用想要的任何方法给 <code>content</code> 属性里的文字和图片的加上样式.</p>
<p>6.<code>::before (:before)</code></p>
<p>CSS 中，<code>::before</code> 创建一个伪元素，其将成为匹配选中的元素的第一个子元素。常通过 <code>content</code> 属性来为一个元素添加修饰性的内容。此元素默认为行内元素。 使用 <code>::before</code> 伪元素的一个简单示例就是用于加入引号。</p>
<p>例子:</p>
<p>HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">q</span>&gt;</span>一些引用<span class="tag">&lt;/<span class="name">q</span>&gt;</span>, 他说, <span class="tag">&lt;<span class="name">q</span>&gt;</span>比没有好。<span class="tag">&lt;/<span class="name">q</span>&gt;</span>.</span><br></pre></td></tr></table></figure>

<p>CSS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">q::before &#123;</span><br><span class="line">  content: &quot;«&quot;;</span><br><span class="line">  color: blue;</span><br><span class="line">&#125;</span><br><span class="line">q::after &#123;</span><br><span class="line">  content: &quot;»&quot;;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>q变成蓝色符号的”&lt;&lt;”</p>
<h4 id="2-5符合选择器总结"><a href="#2-5符合选择器总结" class="headerlink" title="2.5符合选择器总结"></a>2.5符合选择器总结</h4><table>
<thead>
<tr>
<th align="center">选择器</th>
<th align="center">作用</th>
<th align="center">特征</th>
<th align="center">使用情况</th>
<th align="center">隔开符号及用法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">后代选择器</td>
<td align="center">用来选择后代元素</td>
<td align="center">以是子孙后代</td>
<td align="center">多</td>
<td align="center">符号是空格 <code>.nav a</code></td>
</tr>
<tr>
<td align="center">子代选择器</td>
<td align="center">选择最近一级元素</td>
<td align="center">只能选亲儿子</td>
<td align="center">少</td>
<td align="center">符号是大于 <code>.nav&gt;p</code></td>
</tr>
<tr>
<td align="center">并集选择器</td>
<td align="center">选择某些相同样式的元素</td>
<td align="center">可以用于集体声明（提取公共代码）</td>
<td align="center">多</td>
<td align="center">符号是逗号，<code>.nav, a</code></td>
</tr>
<tr>
<td align="center">链接伪类选择器</td>
<td align="center">选择不同状态的链接</td>
<td align="center">跟链接相关</td>
<td align="center">多</td>
<td align="center">重点记住<code>a&#123;&#125;</code>和<code>a:hover&#123;&#125;</code></td>
</tr>
<tr>
<td align="center">:focus 选择器</td>
<td align="center">选择获得光标的表单</td>
<td align="center">跟表单相关</td>
<td align="center">多</td>
<td align="center">记住<code>input:focus</code>用法</td>
</tr>
</tbody></table>
<h3 id="3-元素显示模式"><a href="#3-元素显示模式" class="headerlink" title="3.元素显示模式"></a>3.元素显示模式</h3><h4 id="3-1什么是元素显示模式"><a href="#3-1什么是元素显示模式" class="headerlink" title="3.1什么是元素显示模式"></a>3.1什么是元素显示模式</h4><p>作用：网页的标签非常多，不同地方使用不同，了解其特点可以更好布局。</p>
<p>HTML 元素分为块元素和行内元素。</p>
<h4 id="3-2块级元素"><a href="#3-2块级元素" class="headerlink" title="3.2块级元素"></a>3.2块级元素</h4><p>常见的块元素有 <code>h1-h6</code>、<code>p</code>、<code>div</code>、<code>ul</code>、<code>ol</code>、<code>li</code>等。</p>
<p> 块级元素的特点：</p>
<ol>
<li>独占一行。</li>
<li>高度、宽度、外边距以及内边距都可以控制。</li>
<li>宽度默认是容器（父级宽度）的 100%。</li>
<li>是一个容器及盒子，里面可以方行内或块级元素。</li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li>文字类的标签内不能放块级元素。</li>
<li>文字类元素有 <code>p</code>，<code>h1-h6</code>，尤其不能放 <code>div</code> 元素。</li>
</ul>
<h4 id="3-3行内元素"><a href="#3-3行内元素" class="headerlink" title="3.3行内元素"></a>3.3行内元素</h4><p>常见行内元素：<code>a</code>、<code>strong</code>、<code>b</code>、<code>em</code>、<code>i</code>、<code>del</code>、<code>s</code>、<code>ins</code>、<code>u</code>、<code>span</code>，典型行内元素是 <code>span</code>，行内元素也叫内联元素。</p>
<p>行内元素的特点：</p>
<ol>
<li>相邻行内元素在一行上，一行可以显示多个。</li>
<li>高、宽直接设置是无效的。</li>
<li>默认宽度就是它本身内容宽度。</li>
<li>行内元素只能容纳文本或其他行内元素。</li>
</ol>
<p><strong>注意</strong></p>
<ul>
<li>a 链接里面不能放链接</li>
<li>特殊情况链接 a 里面可以放块级元素，但是给 a 转换一下块级模式最安全。</li>
</ul>
<h4 id="3-4行内块元素"><a href="#3-4行内块元素" class="headerlink" title="3.4行内块元素"></a>3.4行内块元素</h4><p>在行内元素中有几个特殊标签——<code>img</code>, <code>input</code>、<code>td</code>，它们同时具有块元素和行内元素的特点。</p>
<p>有些资料称为行内块元素。</p>
<p>行内块元素的特点：</p>
<ol>
<li>和相邻元素（行内块）在一行上，之间存在空白缝隙，一行可以显示多个。</li>
<li>默认宽度是本身内容宽度。</li>
<li>高度、行高、外边距、内边距都可以控制（块级元素特点）。</li>
</ol>
<h4 id="3-5行内块元素总结"><a href="#3-5行内块元素总结" class="headerlink" title="3.5行内块元素总结"></a>3.5行内块元素总结</h4><table>
<thead>
<tr>
<th align="center">元素模式</th>
<th align="center">元素排列</th>
<th align="center">设置样式</th>
<th align="center">默认宽度</th>
<th align="center">包含</th>
</tr>
</thead>
<tbody><tr>
<td align="center">块级元素</td>
<td align="center">一行只能放一个块级元素</td>
<td align="center">可以设置高度宽度</td>
<td align="center">容器的 100%</td>
<td align="center">可以包含任何标签</td>
</tr>
<tr>
<td align="center">行内元素</td>
<td align="center">一行可以放多个行内元素</td>
<td align="center">不可以设置宽度高度</td>
<td align="center">本身内容宽度</td>
<td align="center">容纳文本或者其他行内元素</td>
</tr>
<tr>
<td align="center">行内块元素</td>
<td align="center">一行可以放置多个行内块元素</td>
<td align="center">可以设置高度宽度</td>
<td align="center">本身内容宽度</td>
<td align="center">都可</td>
</tr>
</tbody></table>
<h4 id="3-6元素模式转换"><a href="#3-6元素模式转换" class="headerlink" title="3.6元素模式转换"></a>3.6元素模式转换</h4><p>特殊情况下，需要将一个元素的模式转换为另外一模式，使其具有另外一种模式的特性。 比如想要增加链接 a 的触发范围。</p>
<p>行内元素可以转换为块元素，块元素也能转换为行内元素。</p>
<p>行内-&gt;块级</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a &#123;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>块级-&gt;行内</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  display: inline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>行内/块级-&gt; 行内块元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-7小技巧单行文字垂直居中"><a href="#3-7小技巧单行文字垂直居中" class="headerlink" title="3.7小技巧单行文字垂直居中"></a>3.7小技巧单行文字垂直居中</h4><p>解决方案：让文字的行高等于盒子的高度。</p>
<p>原理分析：行高=文字本身高度+上空隙+下空隙=盒子高度</p>
<p>当行高小于盒子高度，则文字偏上；当行高大于盒子高度，文字偏下</p>
<h3 id="4-CSS的背景"><a href="#4-CSS的背景" class="headerlink" title="4.CSS的背景"></a>4.CSS的背景</h3><p>CSS 背景属性可以给元素添加背景样式。</p>
<p>背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等。</p>
<h4 id="4-1背景样色"><a href="#4-1背景样色" class="headerlink" title="4.1背景样色"></a>4.1背景样色</h4><p><code>background-color</code> 定义了元素的背景颜色。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: 颜色值;</span><br></pre></td></tr></table></figure>

<p>一般而言，颜色默认值是 <code>transparent</code>（透明），我们也可以指定背景颜色为透明色或其他色。</p>
<h4 id="4-2背景图片"><a href="#4-2背景图片" class="headerlink" title="4.2背景图片"></a>4.2背景图片</h4><p><code>background-image</code> 属性描述了元素的背景图像，实际开发用于 logo 或者一些装饰性开发的小图片或者是超大的背景图片，优点是便于控制位置。（也用于精灵图）</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span>: none|<span class="built_in">url</span>(<span class="string">图片url</span>);</span><br></pre></td></tr></table></figure>

<h4 id="4-3背景平铺"><a href="#4-3背景平铺" class="headerlink" title="4.3背景平铺"></a>4.3背景平铺</h4><p>若需要在 HTML 页面上对背景图进行平铺，可以使用 <code>background-repeat</code> 属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span>: <span class="built_in">repeat</span>(默认) | no-repeat | repeat-x | repeat-y;</span><br></pre></td></tr></table></figure>

<h4 id="4-4背景图片位置"><a href="#4-4背景图片位置" class="headerlink" title="4.4背景图片位置"></a>4.4背景图片位置</h4><p><code>background-position</code> 可以改变图片在背景中的位置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-position: x y;</span><br></pre></td></tr></table></figure>

<p>参数 x 和 y 指 x 坐标和 y 坐标，可以使用方位名词或者精确定位。</p>
<table>
<thead>
<tr>
<th>参数值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>length</td>
<td>百分数/由浮点数和单位字符组成的长度值</td>
</tr>
<tr>
<td>position</td>
<td>top / center / bottom / left / center / right 方位名词</td>
</tr>
</tbody></table>
<h5 id="1-参数是方位名词"><a href="#1-参数是方位名词" class="headerlink" title="1.参数是方位名词"></a>1.参数是方位名词</h5><ul>
<li>若两个值都是方位名词，则两个值前后顺序无关，比如<code>left top</code>和<code>top left</code> 效果一致。</li>
<li>若只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</li>
</ul>
<h5 id="2-参数是精确单位"><a href="#2-参数是精确单位" class="headerlink" title="2.参数是精确单位"></a>2.参数是精确单位</h5><ul>
<li>第一个必定是 x 坐标。第二个是 y 坐标</li>
<li>若只指定一个数值，则另一个必定是 y 轴居中</li>
</ul>
<h5 id="3-参数是混合单位"><a href="#3-参数是混合单位" class="headerlink" title="3.参数是混合单位"></a>3.参数是混合单位</h5><ul>
<li>若是混合单位，则第一个值是 x 坐标，第二个值是 y 坐标。</li>
</ul>
<p><strong>图片水平居中</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">background-image</span>:(<span class="string">&quot;图片url&quot;</span>);</span><br><span class="line"><span class="attribute">background</span>-postion:center top: /**水平居中*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-5背景图像固定"><a href="#4-5背景图像固定" class="headerlink" title="4.5背景图像固定"></a>4.5背景图像固定</h4><p><code>background-attachment</code> 属性设置背景图像是否随着页面其余部分滚动。</p>
<p><code>background-attachment</code> 后期可以制作视差滚动效果。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span>: scroll | fixed;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>scroll</td>
<td>背景图像随着对象内容滚动</td>
</tr>
<tr>
<td>fixed</td>
<td>背景图像固定</td>
</tr>
</tbody></table>
<h4 id="4-6背景属性复合写法"><a href="#4-6背景属性复合写法" class="headerlink" title="4.6背景属性复合写法"></a>4.6背景属性复合写法</h4><p>简化代码，将属性写在同一个属性 <code>background</code> 下。 一般按照约定顺序编写。</p>
<p>background 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: transparent <span class="built_in">url</span>(<span class="string">image.jpg</span>) repeat-y fixed top;</span><br></pre></td></tr></table></figure>

<h4 id="4-7背景颜色半透明"><a href="#4-7背景颜色半透明" class="headerlink" title="4.7背景颜色半透明"></a>4.7背景颜色半透明</h4><p>CSS3 提供 <code>background: rgba(r,g,b,a)</code> 属性设置图片透明度。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>CSS3 新增属性，IE9+支持</li>
</ul>
<h3 id="5-css的三大特性"><a href="#5-css的三大特性" class="headerlink" title="5.css的三大特性"></a>5.css的三大特性</h3><p>CSS 有三个非常重要的特性：层叠性、继承性、优先级。</p>
<h4 id="5-1层叠性"><a href="#5-1层叠性" class="headerlink" title="5.1层叠性"></a>5.1层叠性</h4><p>相同选择器设置相同的样式，此时一个样式就会覆盖另一个冲突的样式。层叠性主要解决样式冲突的问题。</p>
<p>层叠性原则：</p>
<ul>
<li>样式冲突：遵循的原则是就近原则，哪个样式离结构近，就执行哪个样式</li>
<li>样式不冲突，不会层叠</li>
</ul>
<h4 id="5-2继承性"><a href="#5-2继承性" class="headerlink" title="5.2继承性"></a>5.2继承性</h4><p>CSS 中子标签会继承父标签的某些样式，如文本颜色和字号。</p>
<ul>
<li>恰当使用继承可以简化代码，降低 CSS 的复杂性</li>
<li>子元素可以继承父元素的样式（text-, font-, line-这些元素开头的可以继承，以及 color 属性）</li>
</ul>
<h5 id="5-2-1行高的继承性"><a href="#5-2-1行高的继承性" class="headerlink" title="5.2.1行高的继承性"></a>5.2.1行高的继承性</h5><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> Microsoft Yahei;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>行高可以跟单位也可以不跟</li>
<li>如果子元素没有设置行高，则会继承父元素的行高为 1.5</li>
<li>此时子元素的行高是：当前子元素的文字大小*1.5</li>
<li>body 行高 1.5 这样写法最大优势就是里面的子元素可以根据文字大小自动调整行高</li>
</ul>
<h4 id="5-3优先级"><a href="#5-3优先级" class="headerlink" title="5.3优先级"></a>5.3优先级</h4><p>当一个元素指定多个选择器时，就会有有优先级的产生。</p>
<ul>
<li>选择器相同，则执行层叠性</li>
<li>选择器不同，则根据选择器权重执行</li>
</ul>
<p>选择器权重如下所示。</p>
<table>
<thead>
<tr>
<th><strong>选择器</strong></th>
<th><strong>选择器权重</strong></th>
</tr>
</thead>
<tbody><tr>
<td>继承或者<code>*</code></td>
<td>0,0,0,0</td>
</tr>
<tr>
<td>元素选择器</td>
<td>0,0,0,1</td>
</tr>
<tr>
<td>类选择器，伪类选择器</td>
<td>0,0,1,0</td>
</tr>
<tr>
<td>ID 选择器</td>
<td>0,1,0,0</td>
</tr>
<tr>
<td>行内样式 <code>style=&quot;&quot;</code></td>
<td></td>
</tr>
<tr>
<td>!important</td>
<td>1,0,0,0</td>
</tr>
</tbody></table>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: pink <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意</p>
<ul>
<li>继承的权重为 0，即使加了 important 权重也还是 0。</li>
<li>a 链接，浏览器默认指定了一个样式，蓝色，下划线，不会继承父级样式</li>
</ul>
<p><strong>复合选择器权重的叠加</strong></p>
<p>权重可以叠加，需要计算权重，但是没有进位。</p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS复习三</title>
    <url>/CSS%E5%A4%8D%E4%B9%A0%E4%B8%89/</url>
    <content><![CDATA[<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><span id="more"></span>

<h3 id="1-盒子模型"><a href="#1-盒子模型" class="headerlink" title="1.盒子模型"></a>1.盒子模型</h3><h4 id="1-1看透网页本质"><a href="#1-1看透网页本质" class="headerlink" title="1.1看透网页本质"></a>1.1看透网页本质</h4><p>网页布局过程：</p>
<ol>
<li>准备网页元素，网页元素基本都是盒子 box</li>
<li>利用 CSS 设置好盒子样式，然后摆放到相应位置。</li>
<li>往盒子里放东西。</li>
</ol>
<p>本质：利用 CSS 摆盒子。</p>
<h4 id="1-2盒子模型（Box-Model）组成"><a href="#1-2盒子模型（Box-Model）组成" class="headerlink" title="1.2盒子模型（Box Model）组成"></a>1.2盒子模型（Box Model）组成</h4><p>CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，包括：边框、外边距、内边距和实际内容。</p>
<p><img src="C:\Users\Administrator\Desktop\HTML\images\1.png"></p>
<h4 id="1-3边框（border）"><a href="#1-3边框（border）" class="headerlink" title="1.3边框（border）"></a>1.3边框（border）</h4><p>border 可以设置元素边框。边框有三个组成：<code>border-width</code>、<code>border-style</code>、<code>border-color</code></p>
<p><strong>语法</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*属性可连写*/</span></span><br><span class="line"><span class="attribute">border</span>: border-width || border-style || border-color;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>border-width</td>
<td>定义边框粗细，单位 px</td>
</tr>
<tr>
<td>border-style</td>
<td>边框样式</td>
</tr>
<tr>
<td>border-color</td>
<td>边框颜色</td>
</tr>
</tbody></table>
<p><strong>边框属性简写</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">5px</span> solid pink;</span><br></pre></td></tr></table></figure>

<p><strong>边框属性分写</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*注意层叠性*/</span></span><br><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid red;</span><br></pre></td></tr></table></figure>

<h4 id="1-4表格的细线边框"><a href="#1-4表格的细线边框" class="headerlink" title="1.4表格的细线边框"></a>1.4表格的细线边框</h4><p><code>border-collapse</code> 属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。</p>
<p><strong>语法</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-collapse</span>: collapse;</span><br></pre></td></tr></table></figure>

<ul>
<li>collapse 是合并的意思</li>
<li><code>border-collapse:collapse;</code> 表示将相邻边框合并在一起</li>
</ul>
<h4 id="1-5边框会影响盒子实际大小"><a href="#1-5边框会影响盒子实际大小" class="headerlink" title="1.5边框会影响盒子实际大小"></a>1.5边框会影响盒子实际大小</h4><p>边框会额外增加盒子的实际大小，因此有两种方案解决。</p>
<ol>
<li>测量盒子大小的时候，不测边框。</li>
<li>若测量的时候包含了边框，则需要 width/height-边框宽度。</li>
</ol>
<h4 id="1-6内边距padding"><a href="#1-6内边距padding" class="headerlink" title="1.6内边距padding"></a>1.6内边距padding</h4><p><code>padding</code> 属性设置内边距，即边框与内容之间的距离。</p>
<ul>
<li><code>padding-left</code>: 左内边距</li>
<li><code>padding-right</code>: 右内边距</li>
<li><code>padding-top</code>: 上内边距</li>
<li><code>padding-bottotm</code>: 下内边距</li>
</ul>
<p><strong>padding 属性简写</strong></p>
<p><code>padding</code> 的值的个数：</p>
<ul>
<li>1 个值：上下左右</li>
<li>2 个值：上下，左右</li>
<li>3 个值：上，左右，下</li>
<li>4 个值：上，右，下，左，顺时针</li>
</ul>
<p><strong>padding 会影响盒子实际大小</strong></p>
<p>当给盒子指定了 <code>padding</code> 值以后，发生了两件事情：</p>
<ol>
<li>内容和边框有了距离，增加内边距</li>
<li>padding 值影响了盒子实际大小</li>
</ol>
<p>也就是说，当盒子已经有了宽度和高度，再指定内边距，会撑大盒子。</p>
<p>要保证盒子和效果图一样大，则让 <code>width/height</code>-多出来的内边距大小即可。</p>
<h4 id="1-7box-sizing属性解决方案"><a href="#1-7box-sizing属性解决方案" class="headerlink" title="1.7box-sizing属性解决方案"></a>1.7box-sizing属性解决方案</h4><p>CSS 中的 <code>box-sizing</code> 属性定义了 <code>user agent</code> 应该如何计算一个元素的总宽度和总高度。</p>
<p>在设置了一个盒子的 <code>width/height</code> 后，再设置其 <code>border/padding</code> 会影响盒子实际大小。当进行响应式布局时，这个尤其烦人。</p>
<p>box-sizing 属性可以被用来调整这些表现。</p>
<ul>
<li><code>content-box</code> 是默认值。如果你设置一个元素的宽为<code>100px</code>，那么这个元素的内容区会有 <code>100px</code> 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>: content-box;</span><br></pre></td></tr></table></figure>

<p><strong>例子：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#example1</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box;  </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span>;  </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**这个盒子的宽度就是 300+(左右边距)+20(左右边框)+60=380</span></span><br><span class="line"><span class="comment">后面自己加的边距和边框会最后会加在宽度里就是盒子最终的宽度</span></span><br><span class="line"><span class="comment">高度同理</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>border-box</code> 告诉浏览器：你想要设置的边框和内边距的值是包含在 <code>width</code> 内的。也就是说，如果你将一个元素的 <code>width</code> 设为 <code>100px</code>，那么这 100px 会包含它的 <code>border</code> 和 <code>padding</code>，内容区的实际宽度是 <code>width</code> 减去 <code>(border + padding)</code> 的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br></pre></td></tr></table></figure>

<p><strong>例子:</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#example2</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span>;  </span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">不管如何加边距和边框这里的完整宽度只能为300px!</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>

<p>尺寸计算公式： <code>width = border + padding + 内容的宽度</code> <code>height = border + padding + 内容的高度</code></p>
<p><strong>若盒子没有指定 <code>width/height</code> 属性，则此时 <code>padding</code> 不会撑开盒子大小。</strong></p>
<h4 id="1-8外边距"><a href="#1-8外边距" class="headerlink" title="1.8外边距"></a>1.8外边距</h4><p><code>margin</code> 属性用于设置外边距，即控制盒子与盒子之间的距离。</p>
<ul>
<li><code>margin-left</code>: 左外边距</li>
<li><code>margin-right</code>: 右外边距</li>
<li><code>margin-top</code>: 上外边距</li>
<li><code>margin-bottotm</code>: 下外边距</li>
</ul>
<p><code>margin</code> 简写方式与 <code>padding</code> 一致。</p>
<h4 id="1-9外边距典型应用"><a href="#1-9外边距典型应用" class="headerlink" title="1.9外边距典型应用"></a>1.9外边距典型应用</h4><p>外边距可以让块级盒子 <strong>水平居中</strong>，但是必须满足两个条件：</p>
<ol>
<li>盒子必须指定宽度（width）</li>
<li>盒子左右的外边距都设置为 <code>auto</code></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使行内元素或行内块元素水平居中,只需要在父亲中定义</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-align</span>: center;</span><br></pre></td></tr></table></figure>

<h4 id="1-10外边距合并"><a href="#1-10外边距合并" class="headerlink" title="1.10外边距合并"></a>1.10外边距合并</h4><h5 id="1-相邻元素垂直外边距的合并"><a href="#1-相邻元素垂直外边距的合并" class="headerlink" title="1.相邻元素垂直外边距的合并"></a>1.相邻元素垂直外边距的合并</h5><p>当上下相邻块元素相遇时，若上面的元素有下外边距，下面的元素有上外边距，则他们之间的垂直间距不是 <code>margin-bottotm</code> 与 <code>margin-top</code> 之和。取两个值中的较大者这种现象被称为相邻元素垂直外边距的合并。</p>
<p><strong>解决方案</strong>： 避免就好了。</p>
<h5 id="2-嵌套元素垂直外边距的塌陷"><a href="#2-嵌套元素垂直外边距的塌陷" class="headerlink" title="2.嵌套元素垂直外边距的塌陷"></a>2.嵌套元素垂直外边距的塌陷</h5><p>对于两个嵌套关系的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值。</p>
<p>解决方案</p>
<ol>
<li>为父元素定义上边框</li>
<li>为父元素定义上内边距</li>
<li>为父元素添加 <code>overflow:hidden</code></li>
</ol>
<h4 id="1-11清除内外边距"><a href="#1-11清除内外边距" class="headerlink" title="1.11清除内外边距"></a>1.11清除内外边距</h4><p>网页元素很多都带有默认内外边距，而且不同浏览器默认的也不一致，因此在布局前，要先清除网页元素的内外边距。</p>
<p><strong>语法</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距。但是转换为块级和行内块元素就可以设置。</p>
<h3 id="3-圆角边框"><a href="#3-圆角边框" class="headerlink" title="3.圆角边框"></a>3.圆角边框</h3><p>CSS3新增 <strong>圆角边框</strong> 属性，盒子可以变成圆角。</p>
<p><code>border-radius</code> 属性用于设置元素的外边框圆角。</p>
<p>语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: length;</span><br></pre></td></tr></table></figure>

<p>原理</p>
<p>（椭）圆与边框的交集形成的圆角效果。</p>
<p>参数</p>
<ul>
<li>参数值可以为数值或百分比的形式</li>
<li>若是正方形，想要设置一个圆，则将数值修改为高度或者宽度的一般即可，或者直接写为 50%</li>
<li>若是矩形，设置为 height 的一半就可以做</li>
<li>简写属性，跟四个值，分别代表左上角、右上角、右下角、左下角</li>
<li>分开来写：<code>border-top-left-radius</code>、<code>border-top-right-radius</code>、<code>border-bottom-right-radius</code>、<code>border-bottom-left-radius</code></li>
</ul>
<h3 id="4-盒子阴影"><a href="#4-盒子阴影" class="headerlink" title="4.盒子阴影"></a>4.盒子阴影</h3><p>CSS3 新增盒子阴影，使用 <code>box-shadow</code> 属性。</p>
<p>语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">bxo-shadow: h-shadow v-shadow blur spread color inset;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>h-shadow</td>
<td>必需，水平阴影的位置，允许负值</td>
</tr>
<tr>
<td>v-shadow</td>
<td>必需，垂直阴影的位置，允许负值</td>
</tr>
<tr>
<td>blur</td>
<td>可选，模糊距离</td>
</tr>
<tr>
<td>spread</td>
<td>可选，阴影的尺寸</td>
</tr>
<tr>
<td>color</td>
<td>可选，阴影的颜色</td>
</tr>
<tr>
<td>inset</td>
<td>可选，将外部阴影改为内部阴影（默认是外部阴影）</td>
</tr>
</tbody></table>
<p>注意：</p>
<ol>
<li>默认是外阴影，但是不可以写这个单词（outset）</li>
<li>盒子阴影不占空间，不会影响其他盒子排列</li>
</ol>
<h3 id="5-文字阴影"><a href="#5-文字阴影" class="headerlink" title="5.文字阴影"></a>5.文字阴影</h3><p>CSS3 中，使用 <code>text-shadow</code> 属性设置文本阴影。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>h-shadow</td>
<td>必需，水平阴影位置。允许负值。</td>
</tr>
<tr>
<td>v-shadow</td>
<td>必须，垂直阴影。允许负值。</td>
</tr>
<tr>
<td>blur</td>
<td>可选，模糊距离。</td>
</tr>
<tr>
<td>color</td>
<td>可选，阴影颜色。</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS复习四</title>
    <url>/CSS%E5%A4%8D%E4%B9%A0%E5%9B%9B/</url>
    <content><![CDATA[<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><span id="more"></span>

<h3 id="1-浮动-float"><a href="#1-浮动-float" class="headerlink" title="1.浮动(float)"></a>1.浮动(float)</h3><h4 id="1-1传统网页布局方式"><a href="#1-1传统网页布局方式" class="headerlink" title="1.1传统网页布局方式"></a>1.1传统网页布局方式</h4><p>网页布局的本质——用 CSS 来摆放盒子，把盒子放到相应位置。</p>
<p>CSS 提供了三种传统布局方式：</p>
<ul>
<li>普通流</li>
<li>浮动</li>
<li>定位</li>
</ul>
<h4 id="1-2标准流（普通流-文档流）"><a href="#1-2标准流（普通流-文档流）" class="headerlink" title="1.2标准流（普通流/文档流）"></a>1.2标准流（普通流/文档流）</h4><p>所谓的标准流，就是标签按照规定好的默认方式排列。</p>
<ol>
<li>块级元素会独占一行，从上到下顺序排列 常用元素：div、hr、p、h1-h6、ul、ol、dl、form、table</li>
<li>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。 常用元素：span、a、i、em</li>
</ol>
<p>标准流是最基本的布局方式。</p>
<p>以上三种方式都是来摆放盒子的，盒子摆到合适位置，布局自然就完成了。</p>
<p>实际开发中，一个页面基本包含三种布局方式。</p>
<h4 id="1-3为什么需要浮动"><a href="#1-3为什么需要浮动" class="headerlink" title="1.3为什么需要浮动?"></a>1.3为什么需要浮动?</h4><p>很多布局效果，标准流没办法完成，此时就可以利用浮动完成布局。浮动可以改变元素标签默认排列方式。</p>
<p>浮动最典型应用：让多个块级元素一行显示。</p>
<p>网页布局第一准则：多个块级元素纵向排列找标准流，多个块级元素找浮动。</p>
<p>网页布局第二准则：先设置盒子大小，再设置盒子位置</p>
<h4 id="1-4什么是浮动"><a href="#1-4什么是浮动" class="headerlink" title="1.4什么是浮动?"></a>1.4什么是浮动?</h4><p><code>float</code> 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘及包含块或另一个浮动框的边缘。</p>
<p>语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">float</span>: 属性值; &#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>none</td>
<td>元素不浮动</td>
</tr>
<tr>
<td>left</td>
<td>元素向左浮动</td>
</tr>
<tr>
<td>right</td>
<td>元素向右浮动</td>
</tr>
</tbody></table>
<h4 id="1-5浮动特性-重点"><a href="#1-5浮动特性-重点" class="headerlink" title="1.5浮动特性(重点)"></a>1.5浮动特性(重点)</h4><p>加了浮动之后的元素，会具有一些特性。</p>
<ol>
<li>浮动元素会脱离标准流</li>
<li>浮动元素会一行内显示并且元素顶部对齐</li>
<li>浮动的元素会具有行内块元素的特性</li>
</ol>
<p><strong>重要特性</strong></p>
<ol>
<li><p>脱离文档流的控制（浮）移动到指定位置（动），脱标 脱离文档流的盒子，会漂浮在文档流的盒子上面，不占位置。</p>
</li>
<li><p>如果多个盒子都设置了浮动，则它们会按照属性值一行显示并且顶端对齐排列。 浮动的元素是相互贴在一起的（没有间隙），若父级宽度放不下盒子，多出的盒子会另起一行对齐。</p>
</li>
<li><p>浮动元素具有行内块元素特性。 任何元素都可以浮动，设置了后元素都具有行内块元素性质。</p>
<ul>
<li>若块级元素没有设置宽度，则默认和父级一样宽</li>
</ul>
<ul>
<li>浮动盒子中间无间隙，紧挨着</li>
<li>行内块元素同理</li>
</ul>
</li>
</ol>
<h4 id="1-6浮动元素经常和标准流父级元素搭配使用"><a href="#1-6浮动元素经常和标准流父级元素搭配使用" class="headerlink" title="1.6浮动元素经常和标准流父级元素搭配使用"></a>1.6浮动元素经常和标准流父级元素搭配使用</h4><p>为了约束元素位置，一般采取：</p>
<p>先用标准流父元素上下排列位置，之后内部子元素采取浮动排列左右位置，符合网页布局第一准则。</p>
<h3 id="2-常见网页布局"><a href="#2-常见网页布局" class="headerlink" title="2.常见网页布局"></a>2.常见网页布局</h3><ol>
<li><p>浮动和标准流的父盒子搭配</p>
<p>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置。</p>
</li>
<li><p>一个元素浮动了，理论上其余兄弟元素也要浮动</p>
<p>一个盒子里有多个盒子，其中一个盒子浮动，其他兄弟也应该浮动，防止引起问题。</p>
<p>浮动的盒子只会影响浮动盒子后面的标准流，不会引起前面的标准流。</p>
</li>
</ol>
<h3 id="3-清除浮动"><a href="#3-清除浮动" class="headerlink" title="3.清除浮动"></a>3.清除浮动</h3><h4 id="3-1为什么需要清除浮动"><a href="#3-1为什么需要清除浮动" class="headerlink" title="3.1为什么需要清除浮动"></a>3.1为什么需要清除浮动</h4><p>由于父级盒子很多情况下，不方便给高度，当时盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的盒子，对后面元素排版产生影响,这里需要自己下来理解。</p>
<h4 id="3-2清除浮动的本质"><a href="#3-2清除浮动的本质" class="headerlink" title="3.2清除浮动的本质"></a>3.2清除浮动的本质</h4><ul>
<li>清除浮动的本质是清除浮动元素造成的影响</li>
<li>如果父盒子本身具有高度，则不需要清除浮动</li>
<li>清除浮动之后，父级会根据浮动的子盒子自动检测高度，父级有了高度，就不会影响下面的标准流了。</li>
</ul>
<h4 id="3-3清除浮动"><a href="#3-3清除浮动" class="headerlink" title="3.3清除浮动"></a>3.3清除浮动</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器: &#123;</span><br><span class="line">  clear: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>left</td>
<td>不允许左侧有浮动元素</td>
</tr>
<tr>
<td>right</td>
<td>不允许右侧有浮动元素</td>
</tr>
<tr>
<td>both</td>
<td>同时清除左右两侧浮动</td>
</tr>
</tbody></table>
<p>清除浮动策略：闭合浮动</p>
<p>方法：</p>
<ol>
<li><strong>额外标签法（隔墙法）</strong>，是 W3C 推荐的方法</li>
<li>父级添加 overflow 属性</li>
<li>父级添加 after 伪元素</li>
<li>父级添加双伪元素</li>
</ol>
<h4 id="3-4清除浮动—额外标签法"><a href="#3-4清除浮动—额外标签法" class="headerlink" title="3.4清除浮动—额外标签法"></a>3.4清除浮动—额外标签法</h4><p>也成为隔墙法，是 W3C 推荐的方法。</p>
<p>额外标签法是在最后一个浮动元素末尾添加一个 <strong>空块级元素</strong>，给其赋以属性 <code>clear:both;</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;<span class="attribute">clear</span>&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>优点：通俗易懂，书写方便</li>
<li>缺点：添加许多无意义的标签，结构化差</li>
</ul>
<p>总结</p>
<ol>
<li><p>清除浮动的本质</p>
<p>清除浮动的本质是清除浮动元素脱离标准流造成的影响</p>
</li>
<li><p>清除浮动的策略</p>
<p><strong>闭合浮动</strong>，只让浮动在父盒子内部影响，不影响父盒子外面的其他盒子。</p>
</li>
<li><p>使用场景</p>
<p>实际开发中可能会遇到，但是不常用。</p>
</li>
</ol>
<h4 id="3-5清除浮动-—父级添加-overflow"><a href="#3-5清除浮动-—父级添加-overflow" class="headerlink" title="3.5清除浮动 —父级添加 overflow"></a>3.5清除浮动 —父级添加 overflow</h4><p>可以给父级添加 <code>overflow</code> 属性，将其属性设置为 <code>hidden</code>、<code>auto</code>或<code>scroll</code>。</p>
<p>注意是给父元素添加代码：</p>
<ul>
<li>优点：代码简洁</li>
<li>缺点：无法显示溢出部分</li>
</ul>
<h4 id="3-6清除浮动-—-after-伪元素法"><a href="#3-6清除浮动-—-after-伪元素法" class="headerlink" title="3.6清除浮动 —:after 伪元素法"></a>3.6清除浮动 —:after 伪元素法</h4><p>实际上也是额外标签法的一种。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  <span class="comment">/*IE6、7专有*/</span></span><br><span class="line">  *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-7清除浮动-—双伪元素法"><a href="#3-7清除浮动-—双伪元素法" class="headerlink" title="3.7清除浮动 —双伪元素法"></a>3.7清除浮动 —双伪元素法</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>优点：代码更简洁</li>
<li>缺点：照顾低版本浏览器</li>
<li>代表网站：小米、腾讯</li>
</ul>
<h4 id="3-8清除浮动总结"><a href="#3-8清除浮动总结" class="headerlink" title="3.8清除浮动总结"></a>3.8清除浮动总结</h4><p>为什么需要清除浮动？</p>
<ol>
<li>父级没高度</li>
<li>子盒子浮动了</li>
<li>影响下面布局了，应该清除浮动。</li>
</ol>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS复习五</title>
    <url>/CSS%E5%A4%8D%E4%B9%A0%E4%BA%94/</url>
    <content><![CDATA[<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><span id="more"></span>

<h3 id="1-为什么需要定位"><a href="#1-为什么需要定位" class="headerlink" title="1.为什么需要定位"></a>1.为什么需要定位</h3><p>一些固定盒子的效果，标准流或浮动都无法快速实现，此时需要定位来实现。所以：</p>
<ol>
<li>浮动可以让多个块级盒子一行没有缝隙排列显示，经常用于横向排列盒子</li>
<li>定位则是可以让盒子自由的在某个盒子内移动位置或者固定屏幕中某个位置，并且可以压住其他盒子。</li>
</ol>
<h3 id="2-定位组成"><a href="#2-定位组成" class="headerlink" title="2.定位组成"></a>2.定位组成</h3><p>定位：将盒子定在某一个位置，所以定位也是在摆放盒子，按照定位的方式移动盒子。定位=定位模式+边偏移。</p>
<p>定位模式用于指定一个元素在文档中的定位方式。边偏移则决定了该元素的最终位置。</p>
<h4 id="2-1定位模式"><a href="#2-1定位模式" class="headerlink" title="2.1定位模式"></a>2.1定位模式</h4><p>定位模式决定元素的定位方式，它通过 CSS 的 position 属性来设置，其值可以分为四个值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>语义</th>
</tr>
</thead>
<tbody><tr>
<td>static</td>
<td>静态定位</td>
</tr>
<tr>
<td>relative</td>
<td>相对定位</td>
</tr>
<tr>
<td>absolute</td>
<td>绝对定位</td>
</tr>
<tr>
<td>fixed</td>
<td>固定定位</td>
</tr>
</tbody></table>
<h4 id="2-2边移量"><a href="#2-2边移量" class="headerlink" title="2.2边移量"></a>2.2边移量</h4><p>边偏移就是定位的盒子移动到最终位置。有 top， bottom， left 和 right 4 个属性</p>
<table>
<thead>
<tr>
<th>边偏移属性</th>
<th>示例</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>top</td>
<td><code>top:80px</code></td>
<td>顶端偏移量，定义元素相对于其父元素上边线的距离。</td>
</tr>
<tr>
<td>bottom</td>
<td><code>bottom: 80px</code></td>
<td>底部偏移量，定义元素相对于其父元素下边线的距离。</td>
</tr>
<tr>
<td>left</td>
<td><code>left： 80px</code></td>
<td>左侧偏移量，定义元素相对于其父元素左边线的距离。</td>
</tr>
<tr>
<td>right</td>
<td><code>right: 80px</code></td>
<td>右侧偏移量，定义元素相对于其父元素右边线的距离。</td>
</tr>
</tbody></table>
<h3 id="3-静态定位static（了解）"><a href="#3-静态定位static（了解）" class="headerlink" title="3.静态定位static（了解）"></a>3.静态定位static（了解）</h3><p>静态定位是元素的默认定位方式，无定位的意思。语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">  <span class="attribute">position</span>: static;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态定位按照标准流特性摆放位置，它没有边偏移静态定位在布局时很少用到。</p>
<h3 id="4-相对定位-relative（重要）"><a href="#4-相对定位-relative（重要）" class="headerlink" title="4.相对定位 relative（重要）"></a>4.相对定位 relative（重要）</h3><p>相对定位是元素在移动位置的时候，是相对于它原来的位置来说的（自恋型）。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>相对定位的特点：（务必记住）</strong></p>
<ol>
<li>它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。</li>
<li>原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待它。（不脱标，继续保留原来位置因此，相对定位并没有脱标。它最典型的应用是给绝对定位当爹的。</li>
</ol>
<h3 id="5-绝对定位-absolute（重要）"><a href="#5-绝对定位-absolute（重要）" class="headerlink" title="5.绝对定位 absolute（重要）"></a>5.绝对定位 absolute（重要）</h3><p>绝对定位是元素在移动位置的时候，是相对于它祖先元素来说的（拼爹型）。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>绝对定位的特点： （务必记住）</p>
<ol>
<li>如果 <strong>没有祖先元素</strong> 或者 <strong>祖先元素没有定位</strong>，则以 <strong>浏览器</strong> 为准定位（ Document 文档）。</li>
<li>如果祖先元素有定位（相对、绝对、固定定位） ，则以最近一级的有定位祖先元素为参考点移动位置。</li>
<li>绝对定位不再占有原先的位置。（脱标）</li>
</ol>
<h3 id="6-子绝父相的由来"><a href="#6-子绝父相的由来" class="headerlink" title="6.子绝父相的由来"></a>6.子绝父相的由来</h3><p>弄清楚这个口诀，就明白了绝对定位和相对定位的使用场景。</p>
<p>这个“子绝父相”太重要了，是我们学习定位的口诀，是定位中最常用的一种方式这句话的意思是：子级是绝对定位的话，父级要用相对定位</p>
<ul>
<li><p>子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</p>
</li>
<li><p>父盒子需要加定位限制子盒子在父盒子内显示。</p>
</li>
<li><p>父盒子布局时，需要占有位置，因此父亲只能是相对定位。</p>
<p>这就是子绝父相的由来，所以相对定位经常用来作为绝对定位的父级。 总结：因为父级需要占有位置，因此是相对定位，子盒子不需要占有位置，则是绝对定位</p>
</li>
</ul>
<h3 id="7-固定定位-重要"><a href="#7-固定定位-重要" class="headerlink" title="7.固定定位(重要)"></a>7.固定定位(重要)</h3><p>固定定位是元素固定于浏览器可视区的位置。主要使用场景：可以在浏览器页面滚动时元素的位置不会改变。</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>固定定位的特点： （务必记住）</p>
<ol>
<li>以浏览器的可视窗口为参照点移动元素。<ul>
<li>跟父元素没有任何关系</li>
<li>不随滚动条滚动</li>
</ul>
</li>
<li>固定定位不 占有原先的位置。 固定定位也是脱标的，其实固定定位也可以看做是一种特殊的绝对定位。</li>
</ol>
<p>固定定位小技巧：固定在版心右侧位置。</p>
<ol>
<li>让固定定位的盒子 left： 50%，走到浏览器可视区（也可以看做版心）的一半位置。</li>
<li>让固定定位的盒子 margin—left）板心宽度的一半距离。多走版心宽度的一半位置就可以让固定定位的盒子贴着版心右侧对弃了</li>
</ol>
<h3 id="8-粘性定位-了解"><a href="#8-粘性定位-了解" class="headerlink" title="8.粘性定位(了解)"></a>8.粘性定位(了解)</h3><p>粘性定位可以被认为是相对定位和固定定位的混合。</p>
<p>Sticky 粘性的 语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>粘性定位的特点：</p>
<ol>
<li>以浏览器的可视窗口为参照点移动元素（固定定位特点）</li>
<li>粘性定位占有原先的位置（相对定位特点）</li>
<li>必须添加 top， left， right， bottom 其中一个才有效跟页面滚动搭配使用。兼容性较差， IE 不支持。</li>
</ol>
<h3 id="9-定位叠放次序-z-index"><a href="#9-定位叠放次序-z-index" class="headerlink" title="9. 定位叠放次序 z-index"></a>9. 定位叠放次序 z-index</h3><p>在使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用 z—index 来控制盒子的前后次序（z 轴）</p>
<p>语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>数值可以是正整数、负整数或 0，默认是 auto ，数值越大，盒子越靠上</li>
<li>如果属性值相同，则按照书写顺序，后来居上</li>
<li>数字后面不能加单位</li>
<li>只有定位的盒子才有 z—index 属性</li>
</ul>
<h3 id="10-定位的拓展"><a href="#10-定位的拓展" class="headerlink" title="10. 定位的拓展"></a>10. 定位的拓展</h3><h4 id="10-1-绝对定位的盒子居中"><a href="#10-1-绝对定位的盒子居中" class="headerlink" title="10.1 绝对定位的盒子居中"></a>10.1 绝对定位的盒子居中</h4><p>加了绝对定位的盒子不能通过 margin：0 auto 水平居中，但是可以通过以下计算方法实现水平和垂直居中。</p>
<ul>
<li>left： 50% ：让盒子的左侧移动到父级元素的水平中心位置。</li>
<li>margin—left：—100px； ：让盒子向左移动自身宽度的一半。</li>
</ul>
<h4 id="10-2-定位特殊特性"><a href="#10-2-定位特殊特性" class="headerlink" title="10.2 定位特殊特性"></a>10.2 定位特殊特性</h4><p>绝对定位和固定定位也和浮动类似。</p>
<ol>
<li>行内元素添加绝对或者固定定位，可以直接设置高度和完度。</li>
<li>块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</li>
</ol>
<h4 id="10-3-脱标的盒子不会触发外边距塌陷"><a href="#10-3-脱标的盒子不会触发外边距塌陷" class="headerlink" title="10.3 脱标的盒子不会触发外边距塌陷"></a>10.3 脱标的盒子不会触发外边距塌陷</h4><p>浮动元素、绝对定位（固定定位）元素的都不会触发外边距合并的问题。</p>
<h4 id="10-4-绝对定位（固定定位）会完全压住盒子"><a href="#10-4-绝对定位（固定定位）会完全压住盒子" class="headerlink" title="10.4 绝对定位（固定定位）会完全压住盒子)"></a>10.4 绝对定位（固定定位）会完全压住盒子)</h4><p>浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）但是绝对定位（固定定位）会压住下面标准流所有的内容。</p>
<p>浮动之所以不会压住文字，因为浮动产生的目的最初是为了做文字环绕效果的。文字会围绕浮动元素</p>
<h3 id="11-网页布局总结"><a href="#11-网页布局总结" class="headerlink" title="11. 网页布局总结"></a>11. 网页布局总结</h3><p>通过盒子模型, 清楚知道大部分 html 标签是一个盒子。 通过 CSS 浮动、定位可以让每个盒子排列成为网页。 一个完整的网页, 是标准流、浮动、定位一起完成布局的, 每个都有自己的专门用法。</p>
<ol>
<li>标准流 可以让盒子上下排列或者左右排列, 垂直的块级盒子显示就用标准流布局。</li>
<li>浮动 可以让多个块级元素一行显示或者左右对齐盒子, 多个块级盒子水平显示就用浮动布局。</li>
<li>定位 定位最大的特点是有层叠的概念, 就是可以让多个盒子前后暑压来显示。如果元素自由在某个盒子内移动就用定位布局。</li>
</ol>
<h3 id="12-元素的显示与隐藏"><a href="#12-元素的显示与隐藏" class="headerlink" title="12. 元素的显示与隐藏"></a>12. 元素的显示与隐藏</h3><p>类似网站广告，当我们点击关闭就不见了，但是我们重新刷新页面，会重新出现！本质：让一个元素在页面中隐藏或者显示出来。</p>
<h4 id="12-1-display-属性"><a href="#12-1-display-属性" class="headerlink" title="12.1 display 属性"></a>12.1 display 属性</h4><ul>
<li><code>display</code> 属性用于设置一个元素应如何显示。</li>
<li><code>display： none;</code> 隐藏对象</li>
<li><code>display ： block;</code> 除了转换为块级元素之外，同时还有显示元素的意思 display 隐藏元素后，不再占有原来的位置。</li>
</ul>
<p>后面应用及其广泛，搭配 JS 可以做很多的网页特效。</p>
<h4 id="12-2-visibility-可见性"><a href="#12-2-visibility-可见性" class="headerlink" title="12.2 visibility 可见性"></a>12.2 visibility 可见性</h4><ul>
<li>visibility 属性用于指定一个元素应可见还是隐藏。- - visibility : visible;元素可视</li>
<li>visibility : hidden;元素隐藏</li>
<li>visibility 隐藏元素后，继续占有原来的位置</li>
</ul>
<p>如果隐藏元素想要原来位置，就用 <code>visibility ： hidden</code> 如果隐藏元素不想要原来位置，就用 <code>display ： none</code> （用处更多重点）</p>
<h4 id="12-3-overflow-溢出"><a href="#12-3-overflow-溢出" class="headerlink" title="12.3 overflow 溢出"></a>12.3 overflow 溢出</h4><p>overflow 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度）时，会发生什么。</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>visible</td>
<td>不剪切内容也不添加滚动条</td>
</tr>
<tr>
<td>hidden</td>
<td>不显示超过对象尺寸的内容</td>
</tr>
<tr>
<td>scroll</td>
<td>超出的部分隐藏掉不管超出内容否，总是显示滚动条</td>
</tr>
<tr>
<td>auto</td>
<td>超出自动显示滚动条，不超出不显示滚动条</td>
</tr>
</tbody></table>
<p>一般情况下，我们都不想让溢出的内容显示出来，因为溢出的部分会影响布局。但是如果有定位的盒子，请慎用<code>overflowhidden</code> 因为它会隐藏多余的部分。</p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>哈哈</title>
    <url>/%E5%93%88%E5%93%88/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JS笔记一</title>
    <url>/JS%E7%AC%94%E8%AE%B0%E4%B8%80/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
</search>
